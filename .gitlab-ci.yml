stages:
  - build
  - private_deploy
  - test
  - public_deploy

image: ${CI_DOCKER_REGISTRY}/llvm-build:4-e2c59838

variables:

  # move all these to CI/CD settings
  GCC_REL_NAME: "esp-2021r2-patch3"
  GCC_REL_VER: "gcc8_4_0"
  XTENSA_CLANG_TOOLCHAIN_REF: "build_newlib_and_toolchain"
  NEWLIB_REPO: "newlib-cygwin"
  NEWLIB_REF: "esp_based_on_3_3_0"
  BINUTILS_REPO: "binutils-gdb"
  BINUTILS_REF: "esp_based_on_binutils-2_35"
  XTENSA_OVERLAYS_REPO: "xtensa-overlays"
  XTENSA_OVERLAYS_REF: "master"
  LLVM_GCC_TESTSUITE_REF: "feature/toolchain_build_script"

  PLATFORM_NAME_LINUX: "linux-amd64"
  PLATFORM_NAME_WIN: "win64"
  PLATFORM_NAME_MACOS: "macos"

  ARCHIVE_TOOL_LINUX: "tar -cJf"
  UNARCHIVE_TOOL_LINUX: "tar -xf"
  ARCHIVE_EXT_LINUX: "tar.xz"

  ARCHIVE_TOOL_WIN: "zip -9 -r"
  UNARCHIVE_TOOL_WIN: "unzip"
  ARCHIVE_EXT_WIN: "zip"

  ARCHIVE_TOOL_MACOS: "tar -cJf"
  UNARCHIVE_TOOL_MACOS: "tar -xf"
  ARCHIVE_EXT_MACOS: "tar.xz"

  DIST_DIR: "dist"
  DOWNLOADS_DIR: "_downloads"

###########################################################################
#################### START OF TEMPORARY LEGACY CODE #######################
# TODO: the code below is to be removed after migration to new build script
  CONF_TARGET: "xtensa-esp32-elf"
  XTENSA_CLANG_TOOLCHAIN: "${CONF_TARGET}-clang"
##################### END OF TEMPORARY LEGACY CODE ########################
###########################################################################

.use_ci_tools: &use_ci_tools |
  curl -sSL ${CIT_LOADER_URL} -o cit_loader.sh && sh cit_loader.sh
  source citools/import_functions

.add_gitlab_key: &add_gitlab_key |
  cit_add_ssh_key "${GITLAB_KEY}"

before_script:
  - *use_ci_tools
  - *add_gitlab_key

# Prepare release name/number
.get_release_name: &get_release_name |
  # using annotated tags
  REL_NUM=$(git describe --abbrev=7)
  REL_SFX="llvm14_0_0"
  REL_NAME=${REL_SFX}-${REL_NUM}-${PLATFORM_NAME}
  ARCHIVE_NAME=${REL_NAME}.${ARCHIVE_EXT}
  echo "PLATFORM_NAME: $PLATFORM_NAME"
  echo "REL_NUM: $REL_NUM"
  echo "REL_NAME: $REL_NAME"
  echo "ARCHIVE_NAME: $ARCHIVE_NAME"

# Get an existing crosstool-ng builds for all chips
.get_gcc_toolchain: &get_gcc_toolchain |
  declare -a XTENSA_CPUS=("esp32"
                         "esp32s2"
                         "esp32s3")
  for ((i = 0; i < ${#XTENSA_CPUS[@]}; i++)); do
    XTENSA_CPU=${XTENSA_CPUS[$i]}
    GCC_TOOLCHAIN_ARCH=xtensa-${XTENSA_CPU}-elf-${GCC_REL_VER}-${GCC_REL_NAME}-linux-amd64.tar.gz
    wget --no-verbose https://dl.espressif.com/github_assets/espressif/crosstool-NG/releases/download/${GCC_REL_NAME}/${GCC_TOOLCHAIN_ARCH}
    ${UNARCHIVE_TOOL} ${GCC_TOOLCHAIN_ARCH}
  done;
  GCC_TOOLCHAIN_ARCH=riscv32-esp-elf-${GCC_REL_VER}-${GCC_REL_NAME}-linux-amd64.tar.gz
  wget --no-verbose https://dl.espressif.com/github_assets/espressif/crosstool-NG/releases/download/${GCC_REL_NAME}/${GCC_TOOLCHAIN_ARCH}
  ${UNARCHIVE_TOOL} ${GCC_TOOLCHAIN_ARCH}

.get_clang_toolchain_build_scripts: &get_clang_toolchain_build_scripts |
  git clone -b ${XTENSA_CLANG_TOOLCHAIN_REF} ${GITLAB_SSH_SERVER}/${XTENSA_CLANG_TOOLCHAIN_REPO}
  cp -r xtensa-clang-toolchain/* .

# LLVM Build System used the remote address to show detailed version info, we'll change it to the public repository
.fix_origin_remote_for_public: &fix_origin_remote_for_public |
  git remote set-url origin "${GH_REPO_HTTPS}"

# Pack the toolchain
.package_toolchain: &package_toolchain |
  ${ARCHIVE_TOOL} ${ARCHIVE_NAME} esp-elf-clang/
  mkdir -p ${DISTRO_DIR}
  mv ${ARCHIVE_NAME} ${DISTRO_DIR}/
  echo "${ARCHIVE_NAME}" > ${DISTRO_DIR}/file_${PLATFORM_NAME}

.build_template:
  stage: build
  tags: [ "amd64", "build" ]
  artifacts:
    paths:
      - ${DIST_DIR}/
      - _build_Release/tests.log
    when: always
    expire_in: 1 day
  script:
    - *get_release_name
    - mkdir ${DOWNLOADS_DIR}
    - pushd ${DOWNLOADS_DIR}
    - export ESP_GCC_TOOLCHAIN_DIST_BASE=$PWD
    - *get_gcc_toolchain
    - git clone -b ${NEWLIB_REF} --single-branch ${GITLAB_SSH_SERVER}/idf/${NEWLIB_REPO}.git
    - export NEWLIB_PATH=$PWD/${NEWLIB_REPO}
    - git clone -b ${BINUTILS_REF} --single-branch ${GITLAB_SSH_SERVER}/idf/${BINUTILS_REPO}.git
    - export BINUTILS_PATH=$PWD/${BINUTILS_REPO}
    - git clone -b ${XTENSA_OVERLAYS_REF} --single-branch ${GITLAB_SSH_SERVER}/idf/${XTENSA_OVERLAYS_REPO}.git
    - export XTENSA_OVERLAYS_PATH=$PWD/${XTENSA_OVERLAYS_REPO}
    - popd
    - *get_clang_toolchain_build_scripts
    - *fix_origin_remote_for_public
    - export ESP_GCC_TOOLCHAIN_REL_VER=${GCC_REL_NAME}
    - export LLVM_PROJECT_PATH=$PWD
    - export ESP_CLANG_BUILD_TYPE=Release
    - export BUILD_PATH=$PWD/_build_$ESP_CLANG_BUILD_TYPE
    - ./build_toolchain.sh 2>&1 > /dev/null
    # Run tests as non-root user
    # permission tests fail when run by root
    - useradd -m test_runner
    - chown -R test_runner $BUILD_PATH
    - runuser -l test_runner -c 'cmake --build '$BUILD_PATH'/clang --target check-all 2>&1 > '$BUILD_PATH'/tests.log'
    - export DISTRO_DIR=$PWD/$DIST_DIR
    - pushd $BUILD_PATH
    - *package_toolchain
    - popd

###########################################################################
#################### START OF TEMPORARY LEGACY CODE #######################
# TODO: the code below is to be removed after migration to new build script
.get_release_name_old: &get_release_name_old |
  # using annotated tags
  REL_NUM=$(git describe --abbrev=7)
  REL_SFX="llvm14_0_0"
  REL_NAME=${CONF_TARGET}-${REL_SFX}-${REL_NUM}-${PLATFORM_NAME}
  ARCHIVE_NAME=${REL_NAME}.${ARCHIVE_EXT}
  echo "PLATFORM_NAME: $PLATFORM_NAME"
  echo "REL_NUM: $REL_NUM"
  echo "REL_NAME: $REL_NAME"
  echo "ARCHIVE_NAME: $ARCHIVE_NAME"

.get_gcc_toolchain_old: &get_gcc_toolchain_old |
  wget --no-verbose https://dl.espressif.com/github_assets/espressif/crosstool-NG/releases/download/esp-2021r2-patch3/${XTENSA_GCC_TOOLCHAIN}
  ${UNARCHIVE_TOOL} ${XTENSA_GCC_TOOLCHAIN}
  mv xtensa-esp32-elf ${XTENSA_CLANG_TOOLCHAIN}

.package_toolchain_old: &package_toolchain_old |
  ${ARCHIVE_TOOL} ${ARCHIVE_NAME} ${XTENSA_CLANG_TOOLCHAIN}/
  mkdir -p ${DIST_DIR}
  mv ${ARCHIVE_NAME} ${DIST_DIR}/
  echo "${ARCHIVE_NAME}" > ${DIST_DIR}/file_${PLATFORM_NAME}_${CONF_TARGET}

.build_template_old:
  stage: build
  tags: [ "amd64", "build" ]
  artifacts:
    paths:
      - ${DIST_DIR}/
    when: always
    expire_in: 10 day
  script:
    - *get_release_name_old
    - *get_gcc_toolchain_old
    - *fix_origin_remote_for_public
    - *get_clang_toolchain_build_scripts
    - ${BUILD_TOOLCHAIN_CMD} "${XTENSA_CLANG_TOOLCHAIN}"
    - *package_toolchain_old
##################### END OF TEMPORARY LEGACY CODE ########################
###########################################################################

linux_amd64_build:
  extends: .build_template
  variables:
    PLATFORM_NAME: "${PLATFORM_NAME_LINUX}"
    ARCHIVE_TOOL: "${ARCHIVE_TOOL_LINUX}"
    UNARCHIVE_TOOL: "${UNARCHIVE_TOOL_LINUX}"
    ARCHIVE_EXT: "${ARCHIVE_EXT_LINUX}"

win64_build:
  extends: .build_template_old
  variables:
    PLATFORM_NAME: "${PLATFORM_NAME_WIN}"
    ARCHIVE_TOOL: "${ARCHIVE_TOOL_WIN}"
    UNARCHIVE_TOOL: "${UNARCHIVE_TOOL_WIN}"
    ARCHIVE_EXT: "${ARCHIVE_EXT_WIN}"
    XTENSA_GCC_TOOLCHAIN: "xtensa-esp32-elf-${GCC_REL_NAME}-win64.zip"
    BUILD_TOOLCHAIN_CMD: "./build-toolchain-win.sh"

macos_amd64_build:
  extends: .build_template_old
  variables:
    PLATFORM_NAME: "${PLATFORM_NAME_MACOS}"
    ARCHIVE_TOOL: "${ARCHIVE_TOOL_MACOS}"
    UNARCHIVE_TOOL: "${UNARCHIVE_TOOL_MACOS}"
    ARCHIVE_EXT: "${ARCHIVE_EXT_MACOS}"
    XTENSA_GCC_TOOLCHAIN: "xtensa-esp32-elf-${GCC_REL_NAME}-macos.tar.gz"
    BUILD_TOOLCHAIN_CMD: "./build-toolchain-macos.sh"

linux_amd64_testsuite:
  stage: test
  tags: [ "amd64", "build" ]
  dependencies:
    - linux_amd64_build
  variables:
    PLATFORM_NAME: "${PLATFORM_NAME_LINUX}"
    ARCHIVE_TOOL: "${ARCHIVE_TOOL_LINUX}"
    UNARCHIVE_TOOL: "${UNARCHIVE_TOOL_LINUX}"
    ARCHIVE_EXT: "${ARCHIVE_EXT_LINUX}"
  script:
    - *get_release_name
    - ${UNARCHIVE_TOOL} ${DIST_DIR}/${ARCHIVE_NAME}
    # getting testsuite
    - git clone -b ${LLVM_GCC_TESTSUITE_REF} --depth 1 $GITLAB_SSH_SERVER/idf/llvm-xtensa-testsuite.git
    # preparing testsuite
    - export PATH=${PWD}/esp-elf-clang/bin:$PATH
    - cd llvm-xtensa-testsuite
    # qemu
    - ./qemu_esp32_install.sh
    # run testsuite for esp32
    - ./run_esp32_tests.sh

upload_to_http:
  stage: private_deploy
  when: manual
  allow_failure: true
  tags: [ "deploy", "shiny" ]
  variables:
    # force the fetch strategy to clean old archives up in dist/ dir
    GIT_STRATEGY: fetch
  before_script:
    - *use_ci_tools
  script:
    - cit_add_ssh_key "${HTTP_UPLOAD_KEY}"
    # List of archives
    - FILES=$(find ${DIST_DIR} -name file_\* -exec cat {} \+)
    - cd ${DIST_DIR}
    - scp ${FILES} ${HTTP_UPLOAD_DIR}/ct-ng/llvm-builds
    # Show info
    - echo -e "\nArchives were published there:\n\n$(for n in ${FILES}; do echo "${HTTP_PUBLIC_DIR}/ct-ng/llvm-builds/${n}"; done)\n"

upload_to_github:
  stage: public_deploy
  when: manual
  allow_failure: true
  only:
    - tags
  tags: [ "amd64", "internet" ]
  image: espressif/github-hub:2
  variables:
    GIT_STRATEGY: fetch
    GITHUB_TOKEN: "${GH_TOKEN}"
    GITHUB_REPO: "${GH_REPO_HTTPS}"
    TAG: "${CI_COMMIT_TAG}"
  before_script: []
  script:
    - ls -l dist*/
    - git remote add github ${GH_REPO_HTTPS}
    - hub release show ${TAG} || { echo "Please create a release on GitHub with ${TAG} tag at first"; exit 1; }
    # List of archives
    - FILES=$(find ${DIST_DIR} -name file_\* -exec cat {} \+)
    - cd ${DIST_DIR}
    - ls -l $FILES
    # Upload archives
    - for n in ${FILES}; do hub release edit -m "" -a "${n}" "${TAG}"; done
