stages:
  - build
  - private_deploy
  - test
  - public_deploy

image: ${CI_DOCKER_REGISTRY}/llvm-build:2

variables:

  CONF_TARGET: "xtensa-esp32-elf"
  XTENSA_CLANG_TOOLCHAIN: "${CONF_TARGET}-clang"
  PLATFORM_NAME_LINUX: "linux-amd64"
  PLATFORM_NAME_WIN: "win64"

  XTENSA_CLANG_TOOLCHAIN_BRANCH: "esp-20210702-r11.0.0"
  GCC_REL_NAME: "gcc8_4_0-esp-2021r1"
  XTENSA_GCC_TOOLCHAIN_LINUX_TAR_GZ: "xtensa-esp32-elf-${GCC_REL_NAME}-linux-amd64.tar.gz"
  XTENSA_GCC_TOOLCHAIN_WIN_ZIP: "xtensa-esp32-elf-${GCC_REL_NAME}-win64.zip"

  ARCHIVE_TOOL_LINUX: "tar cJf"
  UNARCHIVE_TOOL_LINUX: "tar xf"
  ARCHIVE_EXT_LINUX: "tar.xz"

  ARCHIVE_TOOL_WIN: "zip -9 -r"
  UNARCHIVE_TOOL_WIN: "unzip"
  ARCHIVE_EXT_WIN: "zip"

  DIST_DIR: "dist"

.use_ci_tools: &use_ci_tools |
  curl -sSL ${CIT_LOADER_URL} -o cit_loader.sh && sh cit_loader.sh
  source citools/import_functions

.add_gitlab_key: &add_gitlab_key |
  cit_add_ssh_key "${GITLAB_KEY}"

before_script:
  - *use_ci_tools
  - *add_gitlab_key

.build_template:
  stage: build
  tags: [ "amd64", "build" ]
  artifacts:
    paths:
      - ${DIST_DIR}/
    when: always
    expire_in: 10 day

# Prepare release name/number
.get_release_name: &get_release_name |
  # using annotated tags
  REL_NUM=$(git describe --abbrev=7)
  REL_SFX="llvm11_0_0"
  REL_NAME=${CONF_TARGET}-${REL_SFX}-${REL_NUM}-${PLATFORM_NAME}
  ARCHIVE_NAME=${REL_NAME}.${ARCHIVE_EXT}
  echo "CONF_TARGET: $CONF_TARGET"
  echo "PLATFORM_NAME: $PLATFORM_NAME"
  echo "REL_NUM: $REL_NUM"
  echo "REL_NAME: $REL_NAME"
  echo "ARCHIVE_NAME: $ARCHIVE_NAME"

# Get an existing crosstool-ng build for esp32
.get_gcc_toolchain_linux: &get_gcc_toolchain_linux |
  wget https://dl.espressif.com/dl/${XTENSA_GCC_TOOLCHAIN_LINUX_TAR_GZ}
  tar -xf ${XTENSA_GCC_TOOLCHAIN_LINUX_TAR_GZ}
  mv xtensa-esp32-elf ${XTENSA_CLANG_TOOLCHAIN}

.get_gcc_toolchain_win: &get_gcc_toolchain_win |
  wget https://dl.espressif.com/dl/${XTENSA_GCC_TOOLCHAIN_WIN_ZIP}
  unzip ${XTENSA_GCC_TOOLCHAIN_WIN_ZIP}
  mv xtensa-esp32-elf ${XTENSA_CLANG_TOOLCHAIN}

.get_clang_toolchain_build_scripts: &get_clang_toolchain_build_scripts |
  git clone -b ${XTENSA_CLANG_TOOLCHAIN_BRANCH} ${GITLAB_SSH_SERVER}/${XTENSA_CLANG_TOOLCHAIN_REPO}
  cp -r xtensa-clang-toolchain/* .

 # Pack the toolchain
.package_toolchain: &package_toolchain |
  ${ARCHIVE_TOOL} ${ARCHIVE_NAME} ${XTENSA_CLANG_TOOLCHAIN}/
  mkdir -p ${DIST_DIR}
  mv ${ARCHIVE_NAME} ${DIST_DIR}/
  echo "${ARCHIVE_NAME}" > ${DIST_DIR}/file_${PLATFORM_NAME}_${CONF_TARGET}

build_clang_toolchain_linux:
  extends: .build_template
  script:
    - ARCHIVE_TOOL=${ARCHIVE_TOOL_LINUX}
    - UNARCHIVE_TOOL=${UNARCHIVE_TOOL_LINUX}
    - ARCHIVE_EXT=${ARCHIVE_EXT_LINUX}
    - PLATFORM_NAME=${PLATFORM_NAME_LINUX}
    - *get_release_name
    - *get_gcc_toolchain_linux
    - *get_clang_toolchain_build_scripts
    - ./build-toolchain-linux.sh ${XTENSA_CLANG_TOOLCHAIN}
    - *package_toolchain

build_clang_toolchain_win:
  extends: .build_template
  script:
    - ARCHIVE_TOOL=${ARCHIVE_TOOL_WIN}
    - UNARCHIVE_TOOL=${UNARCHIVE_TOOL_WIN}
    - ARCHIVE_EXT=${ARCHIVE_EXT_WIN}
    - PLATFORM_NAME=${PLATFORM_NAME_WIN}
    - *get_release_name
    - *get_gcc_toolchain_win
    - *get_clang_toolchain_build_scripts
    - ./build-toolchain-win.sh ${XTENSA_CLANG_TOOLCHAIN}
    - *package_toolchain

testsuite:
  stage: test
  tags: [ "amd64", "build" ]
  dependencies:
    - build_clang_toolchain_linux
  script:
    - ARCHIVE_TOOL=${ARCHIVE_TOOL_LINUX}
    - UNARCHIVE_TOOL=${UNARCHIVE_TOOL_LINUX}
    - ARCHIVE_EXT=${ARCHIVE_EXT_LINUX}
    - PLATFORM_NAME=${PLATFORM_NAME_LINUX}
    - *get_release_name
    - ${UNARCHIVE_TOOL} ${DIST_DIR}/${ARCHIVE_NAME}

    # getting testsuit
    - git clone -b feature/ci_llvm_multitarget --depth 1 $GITLAB_SSH_SERVER/idf/llvm-xtensa-testsuite.git

    # preparing testsuit
    - export PATH=$PATH:${PWD}/${XTENSA_CLANG_TOOLCHAIN}/bin/
    - cd llvm-xtensa-testsuite

    # qemu
    - ./qemu_esp32_install.sh

    # run testsuite for esp32
    - ./run_esp32_tests.sh

upload_to_http:
  stage: private_deploy
  when: manual
  allow_failure: true
  tags: [ "deploy", "shiny" ]
  variables:
    # force the fetch strategy to clean old archives up in dist/ dir
    GIT_STRATEGY: fetch
  before_script:
    - *use_ci_tools
  script:
    - cit_add_ssh_key "${HTTP_UPLOAD_KEY}"
    # List of archives
    - FILES=$(find ${DIST_DIR} -name file_\* -exec cat {} \+)
    - cd ${DIST_DIR}
    - scp ${FILES} ${HTTP_UPLOAD_DIR}/ct-ng/llvm-builds
    # Show info
    - echo -e "\nArchives were published there:\n\n$(for n in ${FILES}; do echo "${HTTP_PUBLIC_DIR}/ct-ng/llvm-builds/${n}"; done)\n"

upload_to_github:
  stage: public_deploy
  when: manual
  allow_failure: true
  only:
    - tags
  tags: [ "amd64", "internet" ]
  image: espressif/github-hub:2
  variables:
    GIT_STRATEGY: fetch
    GITHUB_TOKEN: "${GH_TOKEN}"
    GITHUB_REPO: "${GH_REPO_HTTPS}"
    TAG: "${CI_COMMIT_TAG}"
  before_script: []
  script:
    - ls -l dist*/
    - git remote add github ${GH_REPO_HTTPS}
    - hub release show ${TAG} || { echo "Please create a release on GitHub with ${TAG} tag at first"; exit 1; }
    # List of archives
    - FILES=$(find ${DIST_DIR} -name file_\* -exec cat {} \+)
    - cd ${DIST_DIR}
    - ls -l $FILES
    # Upload archives
    - for n in ${FILES}; do hub release edit -m "" -a "${n}" "${TAG}"; done
